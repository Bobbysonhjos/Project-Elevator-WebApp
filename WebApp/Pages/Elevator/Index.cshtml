@page
@using System.Globalization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IndexModel
@{
    ViewData["Title"] = "Elevators";
}


<h1 class="display-4 my-4">Elevators</h1>

<div class="border rounded-3 p-4 shadow bg-white">
    <div class="container">
        <div class="row align-items-center">
            <div class="px-0 my-3 col-md-12 col-lg-8 ">
                <form method="GET">
                    <div class="form">
                        <i class="fa fa-search"></i>
                        @if (Model.Parameters.PageSize != 10)
                        {
                            @Html.Hidden("PageSize", Model.Parameters.PageSize)
                        }
                        @if (!string.IsNullOrEmpty(Model.Parameters.OrderBy))
                        {
                            @Html.Hidden("OrderBy", Model.Parameters.OrderBy)
                        }
                        @if (!string.IsNullOrEmpty(Model.Parameters.OrderDirection))
                        {
                            @Html.Hidden("OrderDirection", Model.Parameters.OrderDirection)
                        }
                        @if (!string.IsNullOrEmpty(Model.Parameters.Filter))
                        {
                            @Html.Hidden("Filter",Model.Parameters.Filter)
                        }
                        <input name="SearchQuery" class="form-control form-control-lg ps-5 py-0 shadow-sm" value="@Model.Parameters.SearchQuery" placeholder="Search anything...">
                    </div>
                </form>
            </div>
            <div class="col col-12 col-md-12 col-lg-4 pe-0 ps-lg-2 ps-md-0 ps-sm-0 ps-0 pt-lg-0 pt-sm-4 pt-3 ">
                <form id="FilterForm-1" class="position-relative filter-form" method="GET">
                    @if (Model.Parameters.CurrentPage > 1)
                    {
                        @Html.Hidden("CurrentPage", Model.Parameters.CurrentPage)
                    }
                    @if (Model.Parameters.PageSize != 10)
                    {
                        @Html.Hidden("PageSize", Model.Parameters.PageSize)
                    }
                    @if (!string.IsNullOrEmpty(Model.Parameters.OrderBy))
                    {
                        @Html.Hidden("OrderBy", Model.Parameters.OrderBy)
                    }
                    @if (!string.IsNullOrEmpty(Model.Parameters.OrderDirection))
                    {
                        @Html.Hidden("OrderDirection",  Model.Parameters.OrderDirection)
                    }
                    @if (!string.IsNullOrEmpty(Model.Parameters.SearchQuery))
                    {
                        @Html.Hidden("SearchQuery",Model.Parameters.SearchQuery)
                    }
                    <label class="position-absolute" asp-for="@Model.Parameters.Filter">Filter</label>
                    <select class="form-control form-select-lg shadow-sm" asp-for="@Model.Filter" asp-items="@Model.Filters" onchange="this.form.submit()"></select>
                </form>
            </div>
        </div>
    </div>
    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col" style="width: 30%"><a class="table-sort-link" asp-route-Filter="@Model.Parameters.Filter" asp-route-OrderBy="id" asp-route-OrderDirection="@Model.SetOrder("id")" asp-route-SearchQuery="@Model.Parameters.SearchQuery" asp-route-PageSize="@Model.Parameters.PageSize">Id</a><span class="fa @(Model.SetSortIcon("id"))"></span></th>
                <th scope="col" style="width: 30%"><a class="table-sort-link" asp-route-Filter="@Model.Parameters.Filter" asp-route-OrderBy="location" asp-route-OrderDirection="@Model.SetOrder("location")" asp-route-SearchQuery="@Model.Parameters.SearchQuery" asp-route-PageSize="@Model.Parameters.PageSize">Location</a><span class="fa @(Model.SetSortIcon("location"))"></span></th>
                <th scope="col" style="width: 10%"><a class="table-sort-link" asp-route-Filter="@Model.Parameters.Filter" asp-route-OrderBy="elevatorstatus" asp-route-OrderDirection="@Model.SetOrder("elevatorstatus")" asp-route-SearchQuery="@Model.Parameters.SearchQuery" asp-route-PageSize="@Model.Parameters.PageSize">Status</a><span class="fa @(Model.SetSortIcon("elevatorstatus"))"></span></th>
                <th scope="col" style="width: 15%"><a class="table-sort-link" asp-route-Filter="@Model.Parameters.Filter" asp-route-OrderBy="createddateutc" asp-route-OrderDirection="@Model.SetOrder("createddateutc")" asp-route-SearchQuery="@Model.Parameters.SearchQuery" asp-route-PageSize="@Model.Parameters.PageSize">Created</a><span class="fa @(Model.SetSortIcon("createddateutc"))"></span></th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Elevators.Any())
            {
                @foreach (var elevator in Model.Elevators)
                {
                    <tr class="cursor-pointer align-middle" style="height: 50px" onclick="location.href = '@Url.Page("./Details", new { ElevatorId = elevator.Id })'">
                        <td>@elevator.Id</td>
                        <td>@elevator.Location</td>
                        <td>@elevator.ElevatorStatus</td>
                        <td>@elevator.CreatedDateUtc.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="container-fluid my-2">
        <div class="row pt-3">
            <div class="col text-center">
                @if (Model.PaginationMetadata!.HasPrevious)
                {
                    <a class="pagination-btn" asp-page="/Elevators/Index" asp-route-filter="@Model.Filter" asp-route-OrderBy="@Model.OrderBy"  asp-route-searchQuery="@Model.SearchQuery" asp-route-order="@Model.Order" asp-route-currentPage="@(Model.PaginationMetadata.CurrentPage - 1)" asp-route-pageSize="@Model.PaginationMetadata.PageSize">
                        <i class="fa-solid fa-angles-left fa-2xl"></i>
                    </a>
                }
            </div>
            <div class="col text-center">
                Page @Model.PaginationMetadata.CurrentPage of @Model.PaginationMetadata.TotalPageCount ( @Model.PaginationMetadata.TotalItemCount )
            </div>
            <div class="col text-center">
                @if (Model.PaginationMetadata.HasNext)
                {
                    <a class="pagination-btn" asp-page="/Elevators/Index" asp-route-filter="@Model.Filter" asp-route-OrderBy="@Model.OrderBy" asp-route-SearchQuery="@Model.SearchQuery" asp-route-order="@Model.Order" asp-route-CurrentPage="@(Model.PaginationMetadata.CurrentPage + 1)" asp-route-PageSize="@Model.PaginationMetadata.PageSize">
                        <i class="fa-solid fa-angles-right fa-2xl"></i>
                    </a>
                }
            </div>
        </div>
    </div>
</div>